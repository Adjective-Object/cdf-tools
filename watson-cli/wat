#!/usr/bin/env bash

# login credentials
# set these to your natural language classifier's login creds
# can be found @ console.ng.bluemix.net, then click 
#   > dashboard
#     > natural language classifier
#       > service credentials
username=""
password=""

api_url="https://gateway.watsonplatform.net/natural-language-classifier/api/v1"


# Classifies a CSV in the watson form
classify_csv () {
    # $1 : classifier id
    # $2 : csv

    # try to make it all one big json list
    echo "{ \"items\" = ["

    while IFS='' read -r line || [[ -n "$line" ]]; do

        len_line=${#line[@]}
        len_text=$((len_line - 1))

        class=${line:0:$len_text} 
        text=${line:len_text}
    
        # open the object for this test string
        # and fill out it's known fields
        echo "{"
        echo "\"class\" : \"$class\","
        echo "\"text\" : \"$text\","

        # collect the output of testing
        # and pretty print it
        result=`curl -G -u "$username":"$password" \
            "$api_url/classifiers/$1/classify" --silent \
                --data-urlencode "text=$text"`
    
        echo "\"result\" : "
        echo $result | python -m json.tool

        # close the current json object and add a trailing comma
        echo "},"

    done < "$2" 

    # This is a hack: put an empty object at the end of the list
    # to make the trailing comma from the previous object not break
    # a json parser
    echo "{}"

    echo "]}"
}







## Get the action to perform
if [ $# -lt 1 ]; then
    action=""
else
    action=$1
fi;

## Query the status of a classifier
if [ "$action" = "query" ]; then
    echo "querying api.."

    if [ $# -gt 1 ]; then
        echo "classifier id : $2";

        status=`curl -u "$username":"$password" \
            "$api_url/classifiers/$2" --progress-bar`


        echo $status | python -m json.tool
    else 
        status=`curl -u "$username":"$password" \
            "$api_url/classifiers" --progress-bar`


        echo $status | python -m json.tool
        echo "use $0 query <classifier-id> to query the status of an api"
    fi

## Check results on a trained classifier
else if [ "$action" = "classify" ]; then

    if [ $# -gt 2 ]; then
        echo "using classifier $2 on text '$3'"

        classify_csv $2 $3

        echo $classification_result | python -m json.tool
    else 
        echo "action 'classify' needs a classifier id"  1>&2
        exit 1
    fi

## Delete a classifier
else if [ "$action" = "delete" ]; then

    if [ $# -gt 1 ]; then
        read -r -p "This will delete classifier $2. Are you sure? [Y/N]" response
        case $response in
            [yY][eE][sS]|[yY])
                echo "deleting $2"

                curl -X DELETE -u "$username":"$password" \
                    "$api_url/classifiers/$2" --progress-bar

                echo ""

                ;;
            *)
                echo "not deleting $2"
                ;;
        esac
    else 
        echo "action 'delete' needs a classifier id" 1>&2
        exit 1
    fi

## Train a classifier
else if [ "$action" = "train" ]; then
    if [ $# -gt 2 ]; then
        echo $2
        echo $3

        curl -i -u "$username":"$password" \
            -F training_data=@$3 \
            -F training_metadata="{\"language\":\"en\",\"name\":\"$2\"}" \
            "$api_url/classifiers"

    else 
        echo "action train' needs a name and a path to a corpus" 1>&2
        exit 1
    fi


## Print helptext
else
    if [ "$action" != "" ]; then
        echo "unkknown action $action"
    fi

    echo "usage: $0 <action> <arguments..>"
    echo "  actions:"
    echo "    query <id> : check the status of a classifier. If no classifcalm-texture-noiseier" 
    echo "                 id is supplied, it queries the overall status of "
    echo "                 all classifiers"
    echo ""
    echo "    classify <id> : classifies a body of text provided as a csv"
    echo "                    with a given classifier id"
    echo ""
    echo "    delete <id> : deletes a given classifier"
    echo ""
    echo "    train <name> <ibmcsv>: Trains a classifier with an ibm csv"t
    echo ""
    echo "    help : print this help text"

fi fi fi fi




